typeof(hand)
attributes(die)
names(die)
names(die) <- c("one", "two", "three", "four", "five", "six")
die
names(die)
attributes(die)
dim(die) <- c(2, 3)
die
dim(die) <- 1:3
die
attributes(die)
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 2, byrow = TRUE)
m
ar <- array(c(11:14, 21:24, 31:34),
dim = c(2, 2, 3))
ar
dim(die) <- c(2, 3)
typeof(die)
class(die)
attributes(die)
class("Hello")
class(5)
class(5L)
today <- Sys.Date()
now <- Sys.time()
today
now
typeof(today)
typeof(now)
class(today)
class(now)
unclass(now)
unclass(Sys.time())
mil <- 1000000
mil
class(mil) <- c("POSIXct", "POSIXt")
mil
gender <- factor(c("male", "female", "female", "male"))
typeof(gender)
attributes(gender)
unclass(gender)
gender
as.character(gender)
gender2 <- factor(c("male", "female", "female", "male"),
levels = c("male", "female"))
str(gender2)
card <- c("ace", "hearts", 1)
card
str(card)
sum(c(TRUE, TRUE, FALSE, FALSE))
as.character(1)
as.logical(1)
as.numeric(FALSE)
list1 <- list(100:130,
"R",
list(TRUE, FALSE))
list1
list1[[3]][[2]]
list1[[3]]
list1
attributes(list1)
list2 <- list(number = 100:130,
char = "R",
logical = list(TRUE, FALSE))
list2
list2$logical[[1]]
list2$logical
attributes(list2)
list2$char
list2[[2]]
list2[[3]]
df1 <- data.frame(c("ace", "two", "six"),
rep("clubs", 3),
c(1, 2, 6))
df1
str(df1)
?data.frame
default.stringsAsFactors()
library(pryr)
load("./r_modifying_values.RData")
parenvs()
parenvs(all = TRUE)
search()
as.environment("package:stats")
globalenv()
baseenv()
emptyenv()
parent.env(globalenv())
# parent.env(emptyenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
assign("new", "Hello Global", envir = globalenv())
ls()
globalenv()$new
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
#> origin environment (pp. 101)
environment(show_env)
environment(parenvs)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
#> R will copy over each argument to the runtime environment
foo <- "take me to your runtime"
show_env <- function(x = foo) {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
#> Calling environment : R calls the function from
rm("foo")
# fix(show_env)
show_env <- function() {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
# fix(show_env)
show_env <- function() {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
deal <- function(){
deck[1, ]
}
deal()
environment(deal)
deal()
DECK <- deck
deck <- deck[-1, ]
nrow(deck)
head(deck, n = 3)
deck <- DECK
deal <- function(){
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal()
#> `deal` will just create a slighthly eltered copy of `deck` in the runtime environment
head(deck, n = 6)
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
head(deck, 6)
deal()
head(deck, 6)
#> Fix `shuffle()`
source("./shuffle.R")
shuffle
deck <- DECK
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
head(deck, 6)
shuffle()
deal()
shuffle()
deal()
shuffle()
deal()
shuffle()
deal()
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
head(deck, 6)
deal()
head(deck, 6)
#> Fix `shuffle()`
shuffle <- function(cards) {
random <- sample(1:52)
cards[random, ]
}
deck <- DECK
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
head(deck, 6)
shuffle()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
ls()
deck
str(cards)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
environment(deal)
environment(shuffle)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function() {
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal()
shuffle()
rm(deck)
shuffle()
deal()
environment(deal)
environment(shuffle)
shuffle()
deal()
environment(deal)
environment(shuffle)
ls()
rm(list = ls())
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function() {
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
source('~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming_1/R/Environments.R')
setwd("~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming_1/R")
source('~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming_1/R/Environments.R')
parenvs()
parenvs(all = TRUE)
search()
## Working with Environments
as.environment("package:stats")
globalenv()
baseenv()
emptyenv()
parent.env(globalenv())
# parent.env(emptyenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
assign("new", "Hello Global", envir = globalenv())
ls()
globalenv()$new
## The Active Environment
environment()
## Scoping Rules
##### Read pp.98
## Assignment
new
new <- "Hello Active"
new
roll <- function(){
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
## Evaluation
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### origin environment
environment(show_env)
environment(parenvs)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
foo <- "take me to your runtime"
show_env <- function(x = foo) {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### calling environment
rm("foo")
# fix(show_env)
show_env <- function() {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
deal <- function(){
deck[1, ]
}
deal()
load("./r_modifying_values.RData")
ls()
rm(list = ls())
load("./r_modifying_values.RData")
parenvs()
parenvs(all = TRUE)
search()
## Working with Environments
as.environment("package:stats")
globalenv()
baseenv()
emptyenv()
parent.env(globalenv())
# parent.env(emptyenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
assign("new", "Hello Global", envir = globalenv())
ls()
globalenv()$new
## The Active Environment
environment()
## Scoping Rules
##### Read pp.98
## Assignment
new
new <- "Hello Active"
new
roll <- function(){
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
## Evaluation
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### origin environment
environment(show_env)
environment(parenvs)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
foo <- "take me to your runtime"
show_env <- function(x = foo) {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### calling environment
rm("foo")
# fix(show_env)
show_env <- function() {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
deal <- function(){
deck[1, ]
}
deal()
environment(deal)
deal()
DECK <- deck
deck <- deck[-1, ]
nrow(deck)
head(deck, n = 3)
deck <- DECK
deal <- function(){
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal()
head(deck, n = 6)
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
head(deck, 6)
deal()
head(deck, 6)
# source("./shuffle.R")
shuffle
deck <- DECK
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
head(deck, 6)
## Closures
shuffle()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
ls()
deck
str(cards)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
environment(deal)
environment(shuffle)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function() {
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal()
shuffle()
rm(deck)
shuffle()
deal()
environment(deal)
environment(shuffle)
