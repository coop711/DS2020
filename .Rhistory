list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
deal <- function(){
deck[1, ]
}
deal()
load("./r_modifying_values.RData")
ls()
rm(list = ls())
load("./r_modifying_values.RData")
parenvs()
parenvs(all = TRUE)
search()
## Working with Environments
as.environment("package:stats")
globalenv()
baseenv()
emptyenv()
parent.env(globalenv())
# parent.env(emptyenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
assign("new", "Hello Global", envir = globalenv())
ls()
globalenv()$new
## The Active Environment
environment()
## Scoping Rules
##### Read pp.98
## Assignment
new
new <- "Hello Active"
new
roll <- function(){
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
## Evaluation
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### origin environment
environment(show_env)
environment(parenvs)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
foo <- "take me to your runtime"
show_env <- function(x = foo) {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
##### calling environment
rm("foo")
# fix(show_env)
show_env <- function() {
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
deal <- function(){
deck[1, ]
}
deal()
environment(deal)
deal()
DECK <- deck
deck <- deck[-1, ]
nrow(deck)
head(deck, n = 3)
deck <- DECK
deal <- function(){
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal()
head(deck, n = 6)
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
head(deck, 6)
deal()
head(deck, 6)
# source("./shuffle.R")
shuffle
deck <- DECK
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
head(deck, 6)
## Closures
shuffle()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
ls()
deck
str(cards)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
environment(deal)
environment(shuffle)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function() {
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal()
shuffle()
rm(deck)
shuffle()
deal()
environment(deal)
environment(shuffle)
as.environment(fix)
environment(fix)
ls("deck")
ls()
rm(list = ls())
load("./r_modifying_values.RData")
environment(deal)
ls("deck")
ls ()
ls(list = "deck")
ls(pattern = "deck")
deck
deal <- function(){
deck[1, ]
}
deal()
environment(deal)
deal()
DECK <- deck
deck <- deck[-1, ]
nrow(deck)
head(deck, n = 3)
deal()
#> `deal` will just create a slighthly altered copy of `deck` in the runtime environment
head(deck, n = 6)
deal <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
head(deck, 6)
deal()
head(deck, 6)
#> Fix `shuffle()`
shuffle <- function(cards) {
random <- sample(1:52)
cards[random, ]
}
deck <- DECK
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
head(deck, 6)
shuffle()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
ls()
head(deck)
str(cards)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
environment(deal)
environment(shuffle)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function() {
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal()
shuffle()
rm(deck)
shuffle()
deal()
environment(deal)
environment(shuffle)
?knitr::include_graphics
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
head(wheel, -1)
combination <- list(rep(head(wheel, -1), each = 3), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(rep(head(wheel, -1), each = 3), sep = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(rep(head(wheel, -1), each = 3), collapse = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(sapply(head(wheel, -1), rep, each = 3), collapse = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(lapply(head(wheel, -1), rep, each = 3), collapse = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(lapply(head(wheel, -1), rep, each = 3), sep = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
combination <- c(paste(sapply(head(wheel, -1), rep, each = 3), sep = " "), "Any comb. bars", "Double Cherris", "Single Cherry")
combination
head(wheel, -1)
rep(head(wheel, -1), each = 3)
sapply(head(wheel, -1), rep, each = 3)
apply(sapply(head(wheel, -1), rep, each = 3), 2, paste(collapse = " "))
apply(sapply(head(wheel, -1), rep, each = 3), 2, paste, collapse = " ")
apply(sapply(head(wheel, -1), rep, each = 3), 2, paste, collapse = " ") %>% unname
library(magrittr)
apply(sapply(head(wheel, -1), rep, each = 3), 2, paste, collapse = " ") %>% unname
library(knitr)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
combination <- wheel %>%
head(-1) %>%
sapply(., rep, each = 3) %>%
apply(., MARGIN = 2, paste, collapse = " ") %>%
unname %>%
c(., "Any comb. bars", "Double Cherris", "Single Cherry"))
combination <- wheel %>%
head(-1) %>%
sapply(., rep, each = 3) %>%
apply(., MARGIN = 2, paste, collapse = " ") %>%
unname %>%
c(., "Any comb. bars", "Double Cherris", "Single Cherry")
combination
kable(Combination = combination, Prizes = Prizes)
# library(printr)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
options(width = 132)
score <- function(symbols) {
#> identify cases
same <- length(unique(symbols)) == 1
bars <- symbols %in% c("B", "BB", "BBB")
#> get prize
if(same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
#> adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
# library(printr)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
options(width = 132)
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
Combination <- wheel %>%
head(-1) %>%
sapply(., rep, each = 3) %>%
apply(., MARGIN = 2, paste, collapse = " ") %>%
unname %>%
c(., "Any combination of bars", "Double Cherries", "Single Cherry")
Prizes <- c(100, 80, 40, 25, 10, 10, 5, 5, 2)
data.frame(Combination, Prizes, stringsAsFactors = FALSE)
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
table(replicate(1000, get_symbols()))
table(replicate(1000, get_symbols()))/3000
round(table(replicate(1000, get_symbols()))/3000, digits = 2)
round(table(replicate(10000, get_symbols()))/30000, digits = 2)
# num <- -2
num <- 4
if (num < 0) {
num <- num * -1
}
num
all(c(TRUE, FALSE))
any(c(TRUE, FALSE))
num <- -1
if (num < 0) {
print("num is negative.")
print("Don't worry, I'll fix it.")
num <- num * -1
print("Now num is positive.")
}
num
x <- -1
if (3 == 3){
x <- 2
}
x
x <- 1
if (TRUE) {
x <- 2
}
x
x <- 1
if (x == 1) {
x <- 2
if (x == 1) {
x <- 3
}
x
pi
a <- pi
dec <- a - trunc(pi)
dec
if(dec >= 0.5) {
a <- trunc(a) + 1
} else {
a <- trunc(a)
}
a
a <- 2
b <- 2
if (a > b) {
print("A wins!")
} else if (a < b) {
print("B wins!")
} else {
print("Tie.")
}
symbols <- c("7", "7", "7")
symbols[1] == symbols[2] & symbols[2] == symbols[3]
symbols == symbols[1]
all(symbols == symbols[1])
unique(symbols)
length(unique(symbols))
length(unique(symbols)) == 1
symbols <- c("B", "BBB", "BB")
symbols %in% c("B", "BB", "BBB")
symbols <- c("B", "BBB", "B")
symbols %in% c("B", "BB", "BBB")
match(symbols, c("B", "BB", "BBB"))
all(symbols %in% c("B", "BB", "BBB"))
same <- length(unique(symbols)) == 1
bars <- symbols %in% c("B", "BB", "BBB")
same
all(bars)
symbols <- rep("B", 3)
same <- length(unique(symbols)) == 1
same
bars <- symbols %in% c("B", "BB", "BBB")
all(bars)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
payouts
payouts["DD"]
payouts["B"]
unname(payouts["DD"])
symbols <- c("7", "7", "7")
symbols[1]
payouts[symbols[1]]
prize <- unname(payouts[symbols[1]])
prize
symbols <- c("C", "C", "C")
payouts[symbols[1]]
prize <- unname(payouts[symbols[1]])
prize
symbols <- c("C", "DD", "C")
symbols == "C"
sum(symbols == "C")
cherries <- sum(symbols == "C")
cherries
cherries + 1
sum(symbols == "DD")
diamonds <- sum(symbols == "DD")
2 ^ diamonds
symbols <- c("C", "DD", "C")
symbols == "C"
sum(symbols == "C")
cherries <- sum(symbols == "C")
cherries
cherries + 1
c(0, 2, 5)[cherries + 1]
symbols <- c("C", "DD", "B")
symbols == "C"
sum(symbols == "C")
cherries <- sum(symbols == "C")
cherries
cherries + 1
c(0, 2, 5)[cherries + 1]
symbols <- c("DD", "DD", "B")
symbols == "C"
sum(symbols == "C")
cherries <- sum(symbols == "C")
cherries
cherries + 1
c(0, 2, 5)[cherries + 1]
sum(symbols == "DD")
diamonds <- sum(symbols == "DD")
2 ^ diamonds
score <- function(symbols) {
#> identify cases
same <- length(unique(symbols)) == 1
bars <- symbols %in% c("B", "BB", "BBB")
#> get prize
if(same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
#> adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play()
replicate(10, play())
one_play <- play()
one_play
load("./Environments.RData")
attributes(DECK)
row.names(DECK)
row.names(DECK) <- 101:152
levels(DECK) <- c("level 1", "level 2", "level 3")
attributes(DECK)
DECK
str(DECK)
?attr
