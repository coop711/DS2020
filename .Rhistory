for (i in 1:length(vec)) {
if (vec[i] < 0) {
vec[i] <- -vec[i]
}
vec
}
abs_set <- function(vec) {
negs <- vec < 0
vec[negs] <- vec[negs] * -1
vec
}
long <- rep(c(-1, 1), 5000000)
system.time(abs_loop(long))
system.time(abs_set(long))
system.time(abs(long))
vec <- 1:10 * rep(c(1, -1), 5)
vec
vec < 0
vec[vec < 0]
vec[vec < 0] * -1
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
many <- rep(vec, 1000000)
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
change_vec <- function(vec) {
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_vec(many))
change_vec2 <- function(vec) {
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen", "BB" = "jack",
"BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
change_vec2(vec)
system.time(change_vec2(many))
system.time(
{
output <- rep(NA, 1000000)
for (i in 1:1000000)
{
output[i] <- i + 1
}
)
system.time(
{
output <- NA
for (i in 1:1000000)
{
output[i] < i + 1
}
)
load("./Loops.RData")
play
winnings <- vector(length = 1000000)
for (i in 1:1000000) {
winnings[i] <- play()
}
mean(winnings)
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
ge_many_symbols(5)
get_many_symbols(5)
symbols <- get_many_symbols(5)
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols
symbols <- get_many_symbols(10)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(10)
symbols
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
cherries + diamonds
!cherries
cherries
?unique
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2s)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(w1 = symb_mat[, 1], w2 = symb_mat[, 2], w3 = symb_mat[, 3],
prize = score_many(symb_mat))
}
system.time(play_may(1000000))
system.time(play_many(1000000))
ls()
knitr::opts_chunk$set(echo = TRUE)
die1 == die2
die1 <- c(1, 2, 3, 4, 5, 6)
die2 <- 1:6
die1 == die2
sapply(list(die1, die2), class)
sapply(list(die1, die2, c(1:6)), class)
?`:`
class(c(1L, 2L, 3L))
?c
?identical
knitr::opts_chunk$set(echo = TRUE)
text <- c("ace", "hearts")
sum(text)
deck <- read.csv("https://gist.githubusercontent.com/garrettgman/9629323/raw/ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
str(deck)
knitr::opts_chunk$set(echo = TRUE)
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[c(1, 3, 5)] <- 2
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec
vec[9] <- 0
vec
vec[9] <- NULL
vec <- vec[-9]
vec
vec[9] <- NULL
knitr::opts_chunk$set(echo = TRUE)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
deck2 <- deck
vec <- rep(0, 6)
?`[`
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[c(1, 3, 5)] <- 2
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec
vec[9] <- 0
vec
# vec[9] <- NULL
vec <- vec[-9]
vec
head(deck2)
deck2$new <- 1:52
head(deck2)
nrow(deck2)
N <- nrow(deck2)
deck2$new2 <- 1:N
head(deck2)
seq(1, 10, by = 2)
seq(2, 10, by = 2)
deck2[seq(13, 52, by = 13), ]
deck2[seq(13, 52, by = 13), 1]
str(deck2[seq(13, 52, by = 13), 1])
str(deck2[seq(13, 52, by = 13), ])
deck2[seq(13, 52, by = 13), 1,
drop = FALSE]
str(deck2[seq(13, 52, by = 13), 1,
drop = FALSE])
deck2$value[seq(13, 52, by = 13)]
deck2[seq(13, 52, by = 13), "value"]
deck2[seq(13, 52, by = 13), 3]
deck2[seq(13, 52, by = 13), c(FALSE, FALSE, TRUE)]
deck2$value[seq(13, 52, by = 13)] <- 14
head(deck2, n = 13)
getwd()
knitr::opts_chunk$set(echo = TRUE)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
getwd()
deck <- read.csv("./data/cards.csv",
stringsAsFactors = FALSE)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
deck2 <- deck
head(deck2,
n = 10)
head(deck2)
head(deck2,
n = -1)
tail(deck2,
n = -2)
str(deck2)
deck2$new <- 1:52
nrow(deck2)
N <- nrow(deck2)
deck2$new2 <- 1:N
head(deck2)
deck2$new <- NULL
head(deck2)
deck2[1, ]
deck2[1, ]
str(deck2[1, ])
deck2[, 1]
deck2[, 1, drop = FALSE]
str(deck2[, 1])
str(deck2[, 1, drop = FALSE])
deck2[1]
str(deck2[1])
deck2[1]$face
deck2$face
deck2[[1]]
seq(from = 13, to = 52, by = 13)
c(13, 26, 39, 52)
deck2[seq(13, 52, by = 13), ]
str(deck2[seq(13, 52, by = 13), ])
deck2[seq(13, 52, by = 13), ]
deck2[seq(13, 52, by = 13), 1]
str(deck2[seq(13, 52, by = 13), 1])
deck2[seq(13, 52, by = 13), 1,
drop = FALSE]
deck2[seq(13, 52, by = 13), "face"]
deck2[seq(13, 52, by = 13), c(TRUE, FALSE, FALSE, FALSE)]
deck2$face[c(13, 26, 39, 52)]
deck2$value[seq(13, 52, by = 13)] <- 14
head(deck2, n = 13)
deck2$value
deck2$value[seq(13, 52, by = 13)]
deck2[seq(13, 52, by = 13), "value"]
deck2[seq(13, 52, by = 13), 3]
deck2[seq(13, 52, by = 13), c(FALSE, FALSE, TRUE, FALSE)]
source("./shuffle.R", echo = TRUE)
sample(1:6, size = 2)
sample(1:6, size = 2)
sample(1:6, size = 6)
sample(1:6)
deck3 <- shuffle(deck)
head(deck3)
tail(deck3)
deck3 <- shuffle(deck)
head(deck3)
tail(deck3)
deck3 <- shuffle(deck)
head(deck3)
tail(deck3)
vec <- vec[1:7]
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[c(1, 3, 5)] <- 2
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec
vec[9] <- 0
vec
# vec[9] <- NULL
vec <- vec[-9]
vec
vec <- vec[1:7]
vec
vec[c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)]
l <- c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)
l
which(l)
w <- which(l)
vec[which(l)]
vec[w]
vec
vec[9] <- 1
vec
is.na(vec)
which(n_l)
which(na_l)
na_l <- is.na(vec)
which(na_l)
which(!na_l)
which(!is.na(vec))
which(is.na(vec))
which(!is.na(vec))
1 > 2
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
1 %in% c(3, 4, 5)
c(1, 2) %in% c(3, 4, 5)
c(1, 2, 3) %in% c(3, 4, 5)
c(1, 2, 3, 4) %in% c(3, 4, 5)
which(c(1, 2, 3, 4) %in% c(3, 4, 5))
deck2$face == "ace"
which(deck2$face == "ace")
sum(deck2$face == "ace")
ace <- deck2$face == "ace"
ace
deck3$value[ace3]
deck2$value[ace]
deck2[ace, "value"]
deck2$value[deck2$face == "ace"]
deck3[1:15, ]
ace3 <- deck3$face == "ace"
which(ace3)
deck3$value[ace3]
deck3[ace3, "value"]
deck3$value[ace3] <- 14
deck3$value[deck3$face == "ace"] <- 14
head(deck3, n = 20)
deck4 <- deck
deck4$value <- 0
head(deck4, n = 20)
deck4[, "value"] <- 10
head(deck4, 13)
head(deck4, n = 13)
deck4[, 3] <- 0
deck4$suit == "hearts"
h <-deck4$suit == "hearts"
h
which(h)
which(deck4$suit == "hearts")
deck4$value[deck4$suit == "hearts"]
deck4$value[h]
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value
deck4$value[h] <- 10
deck4$value
deck4[h, "value"] <- 1
deck4$value
q <- deck4$face == "queen"
q
which(q)
deck4[q, ]
deck4[deck4$face == "queen", ]
(s <- deck4$suit == "spades")
deck4[s, ]
deck4[deck4$suit == "spades", ]
a <- c(1, 2, 3)
b <- c(1, 2, 3)
c <- c(1, 2, 4)
a == b
b == c
a == b & b == c
deck4$face == "queen" & deck4$suit == "spades"
q & s
which(q & s)
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
queenOfSpades
queen_spades <- q & s
queen_spades
which(queenOfSpades)
deck4[queenOfSpades, ]
deck4$value[queenOfSpades]
deck4[queen_spades, ]
deck4[queen_spades, "value"]
deck5 <- deck
head(deck5, n = 20)
facecard <- deck5$face %in% c("king", "queen", "jack")
facecard
which(facecard)
deck5[facecard, ]
deck5[facecard, "value"]
head(deck5, 13)
1 + NA
NA == 1
c(1, 2, NA) == c(1, 2, 3)
c(NA, 1:50)
mean(c(NA, 1:50))
mean(c(NA, 1:50), na.rm = TRUE)
NA == NA
c(1, 2, 3, NA) == NA
vec <- c(1, 2, 3, NA)
is.na(vec)
which(is.na(vec))
ace <- deck$face == "ace"
deck$value[ace] <- NA
head(deck, n = 20)
deck[ace, "value"] <- 14
head(deck, n = 20)
deck3 <- deck
deck3 <- shuffle(deck)
head(deck3)
tail(deck3)
ace3 <- deck3$face == "ace"
ace3
which(ace3)
deck3[ace3, "face"]
deck3$value[deck3$face == "ace"]
deck3$value[ace3] <- NA
head(deck3, n = 20)
ls()
head(deck3)
