wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
prob <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
combos$prob1 <- prob[combos$Var1]
combos
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
head(combos, 3)
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)
sum(combos$prob)
symbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])
score(symbols)
for (value in c("My", "First", "for", "loop")) {
print("one run")
}
value
for (value in c("My", "First", "for", "loop")) {
print(value)
}
for (word in c("My", "First", "for", "loop")) {
print(word)
}
for (string in c("My", "First", "for", "loop")) {
print(string)
}
for (i in c("My", "First", "for", "loop")) {
print(i)
}
for (value in c("My", "First", "for", "loop")) {
value
}
chars <- as.character()
chars
words <- c("My", "First", "for", "loop")
for (i in 1:4) {
chars[i] <- words[i]
}
chars
combos$prize <- NA
head(combos, 3)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
score(c("BB", "DD", "B"))
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
save.image(file = "./Loops.RData")
abs_loop <- function(vec) {
for (i in 1:length(vec)) {
if (vec[i] < 0) {
vec[i] <- -vec[i]
}
vec
}
abs_set <- function(vec) {
negs <- vec < 0
vec[negs] <- vec[negs] * -1
vec
}
long <- rep(c(-1, 1), 5000000)
system.time(abs_loop(long))
system.time(abs_set(long))
system.time(abs(long))
vec <- 1:10 * rep(c(1, -1), 5)
vec
vec < 0
vec[vec < 0]
vec[vec < 0] * -1
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
many <- rep(vec, 1000000)
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
change_vec <- function(vec) {
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_vec(many))
change_vec2 <- function(vec) {
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen", "BB" = "jack",
"BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
change_vec2(vec)
system.time(change_vec2(many))
system.time(
{
output <- rep(NA, 1000000)
for (i in 1:1000000)
{
output[i] <- i + 1
}
)
system.time(
{
output <- NA
for (i in 1:1000000)
{
output[i] < i + 1
}
)
load("./Loops.RData")
play
winnings <- vector(length = 1000000)
for (i in 1:1000000) {
winnings[i] <- play()
}
mean(winnings)
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
ge_many_symbols(5)
get_many_symbols(5)
symbols <- get_many_symbols(5)
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols
symbols <- get_many_symbols(10)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(10)
symbols
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
cherries + diamonds
!cherries
cherries
?unique
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2s)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(w1 = symb_mat[, 1], w2 = symb_mat[, 2], w3 = symb_mat[, 3],
prize = score_many(symb_mat))
}
system.time(play_may(1000000))
system.time(play_many(1000000))
ls()
knitr::opts_chunk$set(echo = TRUE)
die1 == die2
die1 <- c(1, 2, 3, 4, 5, 6)
die2 <- 1:6
die1 == die2
sapply(list(die1, die2), class)
sapply(list(die1, die2, c(1:6)), class)
?`:`
class(c(1L, 2L, 3L))
?c
?identical
knitr::opts_chunk$set(echo = TRUE)
text <- c("ace", "hearts")
sum(text)
deck <- read.csv("https://gist.githubusercontent.com/garrettgman/9629323/raw/ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
str(deck)
knitr::opts_chunk$set(echo = TRUE)
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[c(1, 3, 5)] <- 2
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec
vec[9] <- 0
vec
vec[9] <- NULL
vec <- vec[-9]
vec
vec[9] <- NULL
knitr::opts_chunk$set(echo = TRUE)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
deck2 <- deck
vec <- rep(0, 6)
?`[`
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[c(1, 3, 5)] <- 2
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec
vec[9] <- 0
vec
# vec[9] <- NULL
vec <- vec[-9]
vec
head(deck2)
deck2$new <- 1:52
head(deck2)
nrow(deck2)
N <- nrow(deck2)
deck2$new2 <- 1:N
head(deck2)
seq(1, 10, by = 2)
seq(2, 10, by = 2)
deck2[seq(13, 52, by = 13), ]
deck2[seq(13, 52, by = 13), 1]
str(deck2[seq(13, 52, by = 13), 1])
str(deck2[seq(13, 52, by = 13), ])
deck2[seq(13, 52, by = 13), 1,
drop = FALSE]
str(deck2[seq(13, 52, by = 13), 1,
drop = FALSE])
deck2$value[seq(13, 52, by = 13)]
deck2[seq(13, 52, by = 13), "value"]
deck2[seq(13, 52, by = 13), 3]
deck2[seq(13, 52, by = 13), c(FALSE, FALSE, TRUE)]
deck2$value[seq(13, 52, by = 13)] <- 14
head(deck2, n = 13)
knitr::opts_chunk$set(echo = TRUE)
die <- 1:6
knitr::opts_chunk$set(echo = TRUE)
is.vector(die)
five <- 5
is.vector(five)
length(five)
length(die)
int <- 1L
text <- "ace"
int <- c(1L, 5L)
text <- c("ace", "hearts")
sum(int)
int <- c(-1L, 2L, 4L)
typeof(int)
die <- 1:6
die2 <- c(1, 2, 3, 4, 5, 6)
die == die2
identical(die, die2)
die3 <- c(1L, 2L, 3L, 4L, 5L, 6L)
die == die3
identical(die, die3)
typeof(die)
typeof(die2)
typeof(die3)
pi
sqrt(2)^2 - 2
die2
text <- c("Hello", "World")
text
typeof(text)
typeof("Hello")
3 > 2
1:3 > c(2, 1, 3)
logic <- c(TRUE, FALSE, TRUE)
logic
typeof(logic)
typeof(F)
typeof(FALSE)
comp <- c(1 + 1i, 1 + 2i, 1 + 3i)
comp
typeof(comp)
raw(3)
typeof(raw(3))
hand <- c("ace", "king", "queen", "jack", "ten")
hand
typeof(hand)
attributes(die)
names(die)
names(die) <- c("one", "two", "three", "four", "five", "six")
die
names(die)
attributes(die)
dim(die) <- c(2, 3)
die
dim(die) <- 1:3
die
attributes(die)
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 2, byrow = TRUE)
m
ar <- array(c(11:14, 21:24, 31:34),
dim = c(2, 2, 3))
ar
dim(die) <- c(2, 3)
typeof(die)
class(die)
attributes(die)
class("Hello")
class(5)
class(5L)
today <- Sys.Date()
now <- Sys.time()
today
now
typeof(today)
typeof(now)
class(today)
class(now)
unclass(now)
unclass(Sys.time())
mil <- 1000000
mil
class(mil) <- c("POSIXct", "POSIXt")
mil
gender <- factor(c("male", "female", "female", "male"))
typeof(gender)
attributes(gender)
unclass(gender)
gender
as.character(gender)
gender2 <- factor(c("male", "female", "female", "male"),
levels = c("male", "female"))
str(gender2)
card <- c("ace", "hearts", 1)
card
str(card)
sum(c(TRUE, TRUE, FALSE, FALSE))
as.character(1)
as.logical(1)
as.numeric(FALSE)
list1 <- list(100:130,
"R",
list(TRUE, FALSE))
list1
list1[[3]][[2]]
list1[[3]]
list1
attributes(list1)
list2 <- list(number = 100:130,
char = "R",
logical = list(TRUE, FALSE))
list2
list2$logical[[1]]
list2$logical
attributes(list2)
list2$char
list2[[2]]
list2[[3]]
df1 <- data.frame(c("ace", "two", "six"),
rep("clubs", 3),
c(1, 2, 6))
df1
str(df1)
?data.frame
default.stringsAsFactors()
